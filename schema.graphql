
# START Reputation
type ReputationHolder @entity {
    contract: ID!
    address: ID!
    balance: BigInt!
}

type ReputationMint @entity {
    txHash: Bytes!
    contract: ID!
    address: ID!
    amount: BigInt!
}

type ReputationBurn @entity {
    txHash: Bytes!
    contract: ID!
    address: ID!
    amount: BigInt!
}
# END Reputation

# START UController

type UControllerOrganization @entity {
    avatarAddress: ID!
    nativeToken: Bytes!
    nativeReputation: Bytes!
    controller: Bytes!
}

type UControllerScheme @entity {
    avatarAddress: ID!
    address: Bytes!
    paramsHash: Bytes!
    canRegisterSchemes: Boolean!
    canManageGlobalConstraints: Boolean!
    canUpgradeController: Boolean!
    canDelegateCall: Boolean!
}

type UControllerGlobalConstraint @entity {
    avatarAddress: ID!
    address: Bytes!
    paramsHash: Bytes!
    type: String!
}

type UControllerRegisterScheme @entity {
    txHash: ID!
    controller: Bytes!
    contract: Bytes!
    avatarAddress: Bytes!
    scheme: Bytes!
}

type UControllerUnregisterScheme @entity {
    txHash: ID!
    controller: Bytes!
    contract: Bytes!
    avatarAddress: Bytes!
    scheme: Bytes!
}

type UControllerUpgradeController @entity {
    txHash: ID!
    controller: Bytes!
    avatarAddress: Bytes!
    newController: Bytes!
}

type UControllerAddGlobalConstraint @entity {
    txHash: ID!
    controller: Bytes!
    avatarAddress: Bytes!
    globalConstraint: Bytes!
    paramsHash: Bytes!
    type: String!
}

type UControllerRemoveGlobalConstraint @entity {
    txHash: ID!
    controller: Bytes!
    avatarAddress: Bytes!
    globalConstraint: Bytes!
    isPre: Booleans!
}

# END UController


type DAO @entity {
    avatarAddress: ID!
    controllerAddress: Bytes
    reputationCount: BigInt!
    reputationAddress: Bytes
}

type Proposal @entity {
    submittedTime: BigInt!
    proposalId: ID!
    proposer: Bytes!
    beneficiaryAddress: Bytes!
    daoAvatarAddress: Bytes!
    reputationChange: BigInt
    contributionDescriptionHash: Bytes!
    externalToken: Bytes
    numOfChoices: BigInt
    state: Int
    decision: BigInt
    executionTime: BigInt
}

type Vote @entity{
    accountId: Bytes!
    avatarAddress: Bytes!
    reputation:	Bytes!
    voterAddress: Bytes!
    voteOption: BigInt!
    proposalId: Proposal!
}

type Stake @entity {
    accountId: Bytes!
    avatarAddress: Bytes!
    stakerAddress: Bytes!
    prediction: BigInt!
    stakeAmount: BigInt!
    proposalId: Proposal!
}

type Redemption @entity{
    rewardId: Reward!
    proposalId: ID!
    accountId: ID!
}

type Reward @entity{
    id: ID!
    type: RewardType
    amount: BigInt!
}

enum RewardType @entity{
    beneficiaryEth
    beneficiaryNativeToken
    beneficiaryReputation
    beneficiaryExternalToken
    gpRep
    gpGen
    gpBounty
}
