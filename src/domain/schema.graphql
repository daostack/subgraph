# WORKAROUND: there's no `console.log` functionality in mapping.
# so we use `debug(..)` which writes a `Debug` entity to the store so you can see them in graphiql.
type Debug @entity {
	id: ID!
	message: String!
}

enum Outcome {
	Pass
	Fail
}

type DAO @entity {
	id: ID!
	name: String!
	nativeToken: Token!
	nativeReputation: Rep!
	proposals: [Proposal!] @derivedFrom(field: "dao")
	reputationHolders: [ReputationHolder!] @derivedFrom(field: "dao")
	reputationHoldersCount: BigInt!
	rewards: [GPReward!] @derivedFrom(field: "dao")
	register: String!
	schemes: [ControllerScheme!] @derivedFrom(field: "dao")
	gpQueues: [GPQueue!] @derivedFrom(field: "dao")
	numberOfQueuedProposals: BigInt!
	numberOfPreBoostedProposals: BigInt!
	numberOfBoostedProposals: BigInt!
	numberOfExpiredInQueueProposals: BigInt!
	numberOfQueuedProposalsUnregistered: BigInt!
	numberOfPreBoostedProposalsUnregistered: BigInt!
	numberOfBoostedProposalsUnregistered: BigInt!
	numberOfExpiredInQueueProposalsUnregistered: BigInt!
	error: String
	metadata: String!
	metadataHash: String!
	ethBalance: BigInt!
	vault: Bytes
}

type GPQueue @entity {
 	id: ID!
 	threshold: BigInt!
	scheme: ControllerScheme
 	dao: DAO!
	votingMachine: Bytes!

}

type Rep @entity {
	id: ID!
	dao: DAO
	totalSupply: BigInt!
}

type Token @entity {
	id: ID!
	dao: DAO
	name: String!
	symbol: String!
	totalSupply: BigInt!
}

type Proposal @entity {
	id: ID!
	dao: DAO!
	proposer: Bytes!
	stage: String!
	createdAt: BigInt!
	preBoostedAt: BigInt
	boostedAt: BigInt
	quietEndingPeriodBeganAt: BigInt
	closingAt: BigInt
	executedAt: BigInt
	totalRepWhenExecuted: BigInt
	totalRepWhenCreated: BigInt
	votingMachine: Bytes!
	executionState: String!
	paramsHash: Bytes!
	organizationId: Bytes!
	confidenceThreshold: BigInt!

	descriptionHash: String!
	title: String
	description: String
	url: String
	tags: [Tag!]
	fulltext: [String!]

	gpRewards: [GPReward!] @derivedFrom(field: "proposal")
	accountsWithUnclaimedRewards: [Bytes!]
	expiresInQueueAt: BigInt!

	votes: [ProposalVote!] @derivedFrom(field: "proposal")
	votesFor: BigInt!
	votesAgainst: BigInt!
	winningOutcome: Outcome!

	stakes: [ProposalStake!] @derivedFrom(field: "proposal")
	stakesFor: BigInt!
	stakesAgainst: BigInt!
	confidence: BigDecimal!

	gpQueue: GPQueue!

	scheme: ControllerScheme

	# Contribution Reward params
	contributionReward: ContributionRewardProposal

	# Competition params
	competition: CompetitionProposal

	# Generic Scheme params
	genericScheme: GenericSchemeProposal

	# Upgrade Scheme params
	upgradeScheme: UpgradeSchemeProposal

	# Join Scheme params
	join: JoinProposal

  # TokenTrade Scheme params
  tokenTrade: TokenTradeProposal

	# FundingRequest Scheme params
	fundingRequest: FundingRequestProposal

	# SchemeRegistrar proposal
  	schemeFactory: SchemeFactoryProposal

	# SchemeRegistrar proposal
  	schemeRegistrar: SchemeRegistrarProposal

	genesisProtocolParams: GenesisProtocolParam!



}

type Tag @entity {
	id: ID!
	proposals: [Proposal!]
	numberOfProposals: BigInt!
	competitionSuggestions: [CompetitionSuggestion!]
	numberOfSuggestions: BigInt!
}

type ProposalStake @entity {
	id: ID!
	createdAt: BigInt!
	staker: Bytes!
	proposal: Proposal!
	dao: DAO!
	outcome: Outcome!
	amount: BigInt!
}

type ProposalVote @entity {
	id: ID!
	createdAt: BigInt!
	voter: Bytes!
	proposal: Proposal!
	dao: DAO!
	outcome: Outcome!
	reputation: BigInt!
}

enum RewardReason {
	Contribution
	Proposer
	Voter
	Staker
	Bounty
}

enum RewardType {
	Reputation
	Token
	ETH
	External
}

type GPRewardsHelper @entity {
   	id: ID!
	gpRewards: [PreGPReward!]
}

type PreGPReward @entity {
	id: ID!
	beneficiary: Bytes!
}

type GPReward @entity {
	id: ID!
	createdAt: BigInt!
	dao: DAO!
	beneficiary: Bytes!
	proposal: Proposal!
	reputationForVoter: BigInt
	tokensForStaker: BigInt
	daoBountyForStaker: BigInt
	reputationForProposer: BigInt
	tokenAddress: Bytes
	# timestamps of the redeem events
	reputationForVoterRedeemedAt: BigInt!
	tokensForStakerRedeemedAt: BigInt!
	reputationForProposerRedeemedAt: BigInt!
	daoBountyForStakerRedeemedAt: BigInt!
}

type ContractInfo @entity {
	id: ID!
	name: String!
	alias: String!
	version: String!
	address: Bytes!
}

type UniversalContractInfo @entity {
	id: ID!
	name: String!
	alias: String!
	version: String!
	address: Bytes!
}

type TemplateInfo @entity {
	id: ID!
	templateName: String!
}

type Event @entity {
	id: ID!
	type: String!
	data: String!
	proposal: Proposal
	user: Bytes
	dao: DAO
	timestamp: BigInt!
}
