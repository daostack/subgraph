# template file for generating subgraph.yaml based on configuration

specVersion: 0.0.1
schema:
  file: ./schema.graphql
dataSources:
- kind: ethereum/contract
<<<<<<< HEAD
  name: UController
  source:
    address: "{{addresses.UController}}"
    abi: UController
=======
  name: Reputation
  source:
    address: "{{addresses.Reputation}}"
    abi: Reputation
>>>>>>> reputation
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
<<<<<<< HEAD
    file: ./src/mappings/UController
    entities:
    - UControllerOrganization
    - UControllerScheme
    - UControllerGlobalConstraint
    - UControllerRegisterScheme
    - UControllerUnregisterScheme
    - UControllerUpgradeController
    - UControllerAddGlobalConstraint
    - UControllerRemoveGlobalConstraint
    abis:
    - name: UController
      file: ./abis/UController.json
    eventHandlers:
    - event: RegisterScheme(address, address, address)
      handler: handleRegisterScheme
    - event: UnregisterScheme(address, address, address)
      handler: handleUnregisterScheme
    - event: UpgradeController(address, address, address)
      handler: handleUpgradeController
    - event: AddGlobalConstraint(address, bytes32, uint8, address)
      handler: handleAddGlobalConstraint
    - event: RemoveGlobalConstraint(address, uint256, bool, address)
      handler: handleRemoveGlobalConstraint
=======
    file: ./src/mappings/Reputation
    entities:
    - ReputationHolder
    - ReputationMint
    - ReputationBurn
    abis:
    - name: Reputation
      file: ./abis/Reputation.json
    eventHandlers:
    - event: Mint(address, uint256)
      handler: handleMint
    - event: Burn(address, uint256)
      handler: handleBurn
>>>>>>> reputation
