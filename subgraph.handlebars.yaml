# template file for generating subgraph.yaml based on configuration

specVersion: 0.0.1
schema:
  file: ./schema.graphql
dataSources:

- kind: ethereum/contract
  name: GenesisProtocol
  source:
    address: "{{addresses.GenesisProtocol}}"
    abi: GenesisProtocol
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
    file: ./src/mappings/GenesisProtocol.ts
    entities:
    - Proposal
    abis:
    - name: GenesisProtocol
      file: ./abis/GenesisProtocol.json
    eventHandlers:
    - event: NewProposal(bytes32,address,uint256,address,bytes32)
      handler: handleNewProposal
    - event: Redeem(bytes32, address, address, uint256)
      handler: handleRedeem
    - event: RedeemDaoBounty(bytes32, address, address, uint256)
      handler: handleRedeemDaoBounty
    - event: RedeemReputation(bytes32, address, address, uint256)
      handler: handleRedeemReputation
    - event: VoteProposal(bytes32,address,address,uint256,uint256)
      handler: handleVoteProposal
    - event: Stake(bytes32,address,address,uint256,uint256)
      handler: handleStake
    - event: GPExecuteProposal(bytes32, uint8)
      handler: handleGPExecuteProposal
    - event: ExecuteProposal(bytes32, address, uint256, uint256)
      handler: handleExecuteProposal

- kind: ethereum/contract
  name: DaoCreator
  source:
    address: "{{addresses.DaoCreator}}"
    abi: DaoCreator
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
    file: ./src/mappings/DaoCreator.ts
    entities:
    - DAO
    abis:
    - name: DaoCreator
      file: ./abis/DaoCreator.json
    eventHandlers:
    - event: NewOrg(address)
      handler: handleNewOrg

- kind: ethereum/contract
  name: UController
  source:
    address: "{{addresses.UController}}"
    abi: UController
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
    file: ./src/mappings/UController
    entities:
    - DAO
    abis:
    - name: UController
      file: ./abis/UController.json
    eventHandlers:
    - event: MintReputation(address, address, uint256, address)
      handler: handleMintReputation
    - event: BurnReputation(address, address, uint256, address)
      handler: handleBurnReputation

- kind: ethereum/contract
  name: Reputation
  source:
    address: "{{addresses.Reputation}}"
    abi: Reputation
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
    file: ./src/mappings/Reputation
    entities:
    - DAO
    abis:
    - name: Reputation
      file: ./abis/Reputation.json
    eventHandlers:
    - event: Mint(address, uint256)
      handler: handleMint
    - event: Burn(address, uint256)
      handler: handleBurn

- kind: ethereum/contract
  name: ContributionReward
  source:
    address: "{{addresses.ContributionReward}}"
    abi: ContributionReward
  mapping:
    kind: ethereum/events
    apiVersion: 0.0.1
    language: wasm/assemblyscript
    file: ./src/mappings/ContributionReward
    entities:
    - DAO
    abis:
    - name: ContributionReward
      file: ./abis/ContributionReward.json
    eventHandlers:
    - event: NewContributionProposal(address, bytes32, address, bytes32, int256, uint256[5], address, address)
      handler: handleNewContributionProposal
    - event: RedeemReputation(address, bytes32, address, int256)
      handler: handleRedeemReputation
    - event: RedeemNativeToken(address, bytes32, address, uint256)
      handler: handleRedeemNativeToken
    - event: RedeemEther(address, bytes32, address, uint256)
      handler: handleRedeemEther
    - event: RedeemNativeToken(address, bytes32, address, uint256)
      handler: handleRedeemNativeToken
    - event: RedeemExternalToken(address, bytes32, address, uint256)
      handler: handleRedeemExternalToken
