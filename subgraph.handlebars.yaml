# template file for generating subgraph.yaml based on configuration

specVersion: 0.0.1
schema:
  file: ./schema.graphql
dataSources:
  - kind: ethereum/contract
    name: Reputation
    source:
      address: "{{addresses.Reputation}}"
      abi: Reputation
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.1
      language: wasm/assemblyscript
      file: ./src/mappings/reputation/Reputation.ts
      entities:
        - ReputationHolder
        - ReputationMint
        - ReputationBurn
      abis:
        - name: Reputation
          file: ./abis/Reputation.json
      eventHandlers:
        - event: Mint(address, uint256)
          handler: handleMint
        - event: Burn(address, uint256)
          handler: handleBurn
  - kind: ethereum/contract
    name: GenesisProtocol
    source:
      address: "{{addresses.GenesisProtocol}}"
      abi: GenesisProtocol
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.1
      language: wasm/assemblyscript
      file: ./src/mappings/genesisProtocol/GenesisProtocol.ts
      entities:
        - Proposal
        - Vote
        - GPStake
        - Redemption
        - Reward
        - RewardType
      abis:
        - name: GenesisProtocol
          file: ./abis/GenesisProtocol.json
      eventHandlers:
        - event: NewProposal(bytes32, address, uint256, address, bytes32)
          handler: handleNewProposal
        - event: Redeem(bytes32, address, address, uint256)
          handler: handleRedeem
        - event: RedeemDaoBounty(bytes32, address, address, uint256)
          handler: handleRedeemDaoBounty
        - event: RedeemReputation(bytes32, address, address, uint256)
          handler: handleRedeemReputation
        - event: VoteProposal(bytes32, address, address, uint256, uint256)
          handler: handleVoteProposal
        - event: Stake(bytes32, address, address, uint256, uint256)
          handler: handleStake
        - event: GPExecuteProposal(bytes32, uint8)
          handler: handleGPExecuteProposal
        - event: ExecuteProposal(bytes32, address, uint256, uint256)
          handler: handleExecuteProposal
  - kind: ethereum/contract
    name: UController
    source:
      address: "{{addresses.UController}}"
      abi: UController
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.1
      language: wasm/assemblyscript
      file: ./src/mappings/uController/UController.ts
      entities:
        - UControllerOrganization
        - UControllerScheme
        - UControllerGlobalConstraint
        - UControllerRegisterScheme
        - UControllerUnregisterScheme
        - UControllerUpgradeController
        - UControllerAddGlobalConstraint
        - UControllerRemoveGlobalConstraint
      abis:
        - name: UController
          file: ./abis/UController.json
        - name: Reputation
          file: ./abis/Reputation.json
      eventHandlers:
        - event: RegisterScheme(address, address, address)
          handler: handleRegisterScheme
        - event: UnregisterScheme(address, address, address)
          handler: handleUnregisterScheme
        - event: UpgradeController(address, address, address)
          handler: handleUpgradeController
        - event: AddGlobalConstraint(address, bytes32, uint8, address)
          handler: handleAddGlobalConstraint
        - event: RemoveGlobalConstraint(address, uint256, bool, address)
          handler: handleRemoveGlobalConstraint
  - kind: ethereum/contract
    name: DAOToken
    source:
      address: "{{addresses.DAOToken}}"
      abi: DAOToken
    mapping:
      kind: ethereum/events
      apiVersion: 0.0.1
      language: wasm/assemblyscript
      file: ./src/mappings/daotoken/DAOToken.ts
      entities:
      - TokenHolder
      - TokenMint
      - TokenMintFinished
      - TokenTransfer
      - TokenApproval
      - TokenBurn
      abis:
      - name: DAOToken
        file: ./abis/DAOToken.json
      eventHandlers:
      - event: Mint(address, uint256)
        handler: handleMint
      - event: Burn(address, uint256)
        handler: handleBurn
      - event: Approval(address, uint256)
        handler: handleApproval
      - event: MintFinished()
        handler: handleMintFinished
      - event: Transfer(address, address, uint256)
        handler: handleTransfer
      - event: OwnershipTransferred(address, address)
        handler: handleOwnershipTransferred